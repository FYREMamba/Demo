<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>FYRE Comms Layer</title>
  <style>
    body { font-family: Arial, sans-serif; background: #111; color: #eee; padding: 20px; }
    h1, h2 { color: #fbbf24; }
    .card { background: #222; border: 1px solid #444; padding: 20px; border-radius: 10px; margin-bottom: 20px; }
    .btn { background: linear-gradient(to right, #fbbf24, #ef4444); border: none; padding: 10px 20px; border-radius: 6px; color: white; font-weight: bold; cursor: pointer; }
    .btn:hover { opacity: 0.9; }
    .log { background: #000; color: #0f0; padding: 10px; font-family: monospace; height: 200px; overflow-y: auto; border-radius: 6px; }
    .device-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); gap: 10px; }
    .device { background: #333; padding: 10px; border-radius: 6px; text-align: center; }
    .status { padding: 5px; border-radius: 4px; font-size: 0.9em; margin-top: 5px; }
    .connected { background: #16a34a; }
    .transitioning { background: #ca8a04; }
    .disconnected { background: #444; }
    .error { background: #dc2626; }
  </style>
</head>
<body>

  <h1>üî• FYRE Comms Layer (Standalone)</h1>
  <p>"Courier + Network Toggle + Device State Awareness"</p>

  <!-- Network + Protocol Controls -->
  <div class="card">
    <h2>Network Mode</h2>
    <button class="btn" onclick="toggleNetwork()">Toggle Network</button>
    <p>Current Mode: <span id="mode">wifi</span></p>
    <label>
      <input type="checkbox" id="protocolToggle" checked onchange="toggleProtocol()">
      FYRE Protocol Active
    </label>
  </div>

  <!-- Devices -->
  <div class="card">
    <h2>Devices</h2>
    <div class="device-grid" id="devices"></div>
  </div>

  <!-- Messaging -->
  <div class="card">
    <h2>Send Message</h2>
    <input id="messageInput" type="text" placeholder="Enter message..." style="width:80%">
    <button class="btn" onclick="sendMessage()">Send</button>
  </div>

  <!-- Logs -->
  <div class="card">
    <h2>Logs</h2>
    <div class="log" id="log"></div>
  </div>

  <script>
    let currentMode = "wifi";
    let protocolActive = true;
    const key = "fyre-key";

    let devices = [
      { name: "Google Home", status: "connected" },
      { name: "TV", status: "connected" },
      { name: "Speakers", status: "connected" },
      { name: "Laptop", status: "connected" }
    ];

    // Mock encryption
    function encodeMessage(msg, key) {
      return btoa(msg.split("").reverse().join("") + key);
    }
    function decodeMessage(cipher, key) {
      let raw = atob(cipher);
      return raw.replace(key, "").split("").reverse().join("");
    }

    function renderDevices() {
      const container = document.getElementById("devices");
      container.innerHTML = "";
      devices.forEach(d => {
        const div = document.createElement("div");
        div.className = "device";
        div.innerHTML = `
          <strong>${d.name}</strong>
          <div class="status ${d.status}">${d.status}</div>
        `;
        container.appendChild(div);
      });
    }

    function toggleProtocol() {
      protocolActive = document.getElementById("protocolToggle").checked;
      log(`FYRE Protocol ${protocolActive ? "ENABLED ‚úÖ" : "DISABLED ‚ùå"}`);
    }

    function toggleNetwork() {
      currentMode = currentMode === "wifi" ? "hotspot" : "wifi";
      document.getElementById("mode").textContent = currentMode;
      log(`Switched to ${currentMode.toUpperCase()} mode`);

      if (protocolActive) {
        // Devices transition then reconnect
        devices = devices.map(d => ({ ...d, status: "transitioning" }));
        renderDevices();
        setTimeout(() => {
          devices = devices.map(d => ({ ...d, status: "connected" }));
          renderDevices();
          log("FYRE Protocol preserved device state ‚úÖ");
        }, 2000);
      } else {
        // Chaos mode
        devices = devices.map(d => ({
          ...d,
          status: Math.random() > 0.5 ? "disconnected" : "error"
        }));
        renderDevices();
        log("Devices confused! Some disconnected ‚ùå");
      }
    }

    function sendMessage() {
      const msg = document.getElementById("messageInput").value;
      if (!msg) return;

      const cipher = encodeMessage(msg, key);
      log(`Sent: ${msg}`);
      log(`Encrypted: ${cipher}`);

      const decoded = decodeMessage(cipher, key);
      log(`Received/Decoded: ${decoded}`);
    }

    function log(text) {
      const logBox = document.getElementById("log");
      logBox.innerHTML += text + "<br>";
      logBox.scrollTop = logBox.scrollHeight;
    }

    // Initial render
    renderDevices();
  </script>
</body>
</html>
